version: 2.1
jobs:
  test:
    docker:
      - image: circleci/node:12-browsers
    steps:
      - checkout
      - setup_remote_docker
      - run:
          name: Install Docker client
          command: apk add docker-cli
      - run:
          name: Start container and verify it's working
          command: |
            set -x
            docker run -d \
              --name plex \
              -p 32400:32400/tcp \
              -p 3005:3005/tcp \
              -p 8324:8324/tcp \
              -p 32469:32469/tcp \
              -p 1900:1900/udp \
              -p 32410:32410/udp \
              -p 32412:32412/udp \
              -p 32413:32413/udp \
              -p 32414:32414/udp \
              -h ci-plex \
              plexinc/pms-docker
            # docker-compose will start 1 container, the one with service will be named `plex`
            # we start another container with curl in the same network as `plex`, this way we have
            # all exposed ports from `plex` available on `localhost` in this new container
            docker run --network container:plex \
              appropriate/curl --retry 10 --retry-delay 1 --retry-connrefused http://localhost:32400
      - run:
          name: npm-install
          command: npm ci
      - run:
          name: claim-server
          command: npm run claim-server
      - run:
          name: add-media
          command: npm run add-media
      - run:
          name: copy
          command: docker cp ./media plex:/data
      - run:
          name: test
          command: npm run test:ci
          environment:
            JEST_JUNIT_OUTPUT_DIR: './reports'
            JEST_JUNIT_OUTPUT_NAME: 'test-results.xml'
      - store_test_results:
          path: ./reports
      - run:
          name: lint
          command: npm run lint
      - run:
          name: codecov
          command: bash <(curl -s https://codecov.io/bash)
  release:
    docker:
      - image: circleci/node:12
    steps:
      - checkout
      - run: npm ci
      - run: npm run build
      - run: npm run semantic-release

workflows:
  version: 2
  test_and_release:
    # Run the test jobs first, then the release only when all the test jobs are successful
    jobs:
      - test
      - release:
          filters:
            branches:
              only:
                - master
          requires:
            - test
